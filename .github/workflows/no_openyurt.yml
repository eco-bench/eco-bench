# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the main branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: "Install Edge Orchestrator"

on:
  workflow_dispatch:

jobs:
  terraform:
    name: "Provision Environment"
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      # Copy Service Account Secret to provisioning Directory
      - name: Create Service Account Json File
        working-directory: ./install-scripts/provisioning
        run: touch service-account.json

      # Copy Service Account Secret to provisioning Directory
      - name: Copy Secret to Service Account Json File
        working-directory: ./install-scripts/provisioning
        run: echo '${{ secrets.GCE_SERVICE_ACCOUNT }}' >> service-account.json

      - name: Format Terraform Files
        working-directory: ./install-scripts/provisioning
        run: terraform fmt

      # Move Public Key for current User
      - name: Create Public Key
        run: |
          mkdir ~/.ssh
          touch ~/.ssh/id_rsa.pub
          echo '${{ secrets.PUBLIC_KEY }}' >> ~/.ssh/id_rsa.pub

      - name: Download cluster state artifact
        uses: dawidd6/action-download-artifact@v2
        continue-on-error: true
        with:
          workflow: terraform.yml
          name: my-artifact
          path: .

      - name: Move
        continue-on-error: true
        run: |
          cp -f ./terraform.tfstate ./install-scripts/provisioning/
          cp -f ./terraform.tfstate.backup ./install-scripts/provisioning/
      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        working-directory: ./install-scripts/provisioning
        run: terraform init

      - name: Terraform Apply
        working-directory: ./install-scripts/provisioning
        run: terraform apply -var-file tfvars.json -auto-approve

      - name: check inventory file
        working-directory: ./install-scripts/provisioning
        run: cat inventory.ini

      - uses: actions/upload-artifact@v2
        with:
          name: my-artifact
          path: ./install-scripts/provisioning

  mongodb:
    name: "Install MongoDB"
    needs: terraform
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2

      - uses: actions/download-artifact@master
        with:
          name: my-artifact
          path: tmp

      - name: create file with ssh key
        run: |
          mkdir ~/.ssh
          touch ~/.ssh/id_rsa
          echo '${{ secrets.PRIVATE_KEY }}' >> ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - run: ansible-galaxy install undergreen.mongodb

      - name: run ansible playbook
        working-directory: ./benchmarking
        run: ansible-playbook install_mongodb.yml -i ../tmp/inventory.ini

  mikrok8s:
    name: "Install MicroK8s"
    needs: terraform
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2

      - uses: actions/download-artifact@master
        with:
          name: my-artifact
          path: tmp

      - run: cp tmp/inventory.ini install-scripts/microk8s/ansible/

      - name: create file with ssh key
        run: |
          mkdir ~/.ssh
          touch ~/.ssh/id_rsa
          echo '${{ secrets.PRIVATE_KEY }}' >> ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: run ansible playbook
        working-directory: install-scripts/microk8s/ansible
        run: ansible-playbook cluster_install.yml -i inventory.ini

  k3s:
    name: "Install k3s"
    needs: terraform
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@master
        with:
          name: my-artifact
          path: tmp

      - run: ls

      - run: cat tmp/inventory.ini

      - run: cp tmp/inventory.ini install-scripts/k3s-ansible/inventory/sample

      - run: ls install-scripts/k3s-ansible/inventory/sample

      - name: create file with ssh key
        run: |
          mkdir ~/.ssh
          touch ~/.ssh/id_rsa
          echo '${{ secrets.PRIVATE_KEY }}' >> ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - run: ls install-scripts/k3s-ansible

      - name: run ansible playbook
        working-directory: install-scripts/k3s-ansible
        run: ansible-playbook -i inventory/sample/inventory.ini site.yml

  deploy-applications-k3s:
    name: "Deploy Applications k3s"
    needs:
      - k3s
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2

      - uses: actions/download-artifact@master
        with:
          name: my-artifact
          path: tmp

      - run: cp tmp/inventory.ini install-scripts/k3s-ansible/

      - run: cat install-scripts/k3s-ansible/inventory.ini

      - name: create file with ssh key
        run: |
          mkdir ~/.ssh
          touch ~/.ssh/id_rsa
          echo '${{ secrets.PRIVATE_KEY }}' >> ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: run ansible playbook
        working-directory: install-scripts/k3s-ansible/
        run: ansible-playbook apply_applications.yml -i inventory.ini

  deploy-applications-microk8s:
    name: "Deploy Applications Microk8s"
    needs:
      - mikrok8s
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2

      - uses: actions/download-artifact@master
        with:
          name: my-artifact
          path: tmp

      - run: cp tmp/inventory.ini install-scripts/microk8s/ansible/

      - run: cat tmp/inventory.ini

      - name: create file with ssh key
        run: |
          mkdir ~/.ssh
          touch ~/.ssh/id_rsa
          echo '${{ secrets.PRIVATE_KEY }}' >> ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: run ansible playbook
        working-directory: install-scripts/microk8s/ansible
        run: ansible-playbook apply_applications.yml -i inventory.ini

  run-benchmark:
    name: "Benchmark"
    needs:
      - deploy-applications-k3s
      - deploy-applications-microk8s
      - mongodb
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2

      - uses: actions/download-artifact@master
        with:
          name: my-artifact
          path: tmp

      - run: cp tmp/inventory.ini benchmarking/

      - run: cat tmp/inventory.ini

      - name: create file with ssh key
        run: |
          mkdir ~/.ssh
          touch ~/.ssh/id_rsa
          echo '${{ secrets.PRIVATE_KEY }}' >> ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: run ansible playbook
        working-directory: benchmarking
        run: ansible-playbook script.yml -i inventory.ini

  evaluate:
    name: "Evaluate and Plot"
    needs:
      - run-benchmark
    environment: production
    runs-on: ubuntu-latest

    steps:
      - uses: actions/download-artifact@master
        with:
          name: my-artifact
          path: /tmp

      # Move Public Key for current User
      - name: Create Public Key
        run: |
          mkdir ~/.ssh
          touch ~/.ssh/id_rsa
          echo '${{ secrets.PRIVATE_KEY }}' > ~/.ssh/id_rsa

      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Install dependencies
        working-directory: ./benchmarking
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt

      - run: |
          cd ~/.ssh
          pwd

      - name: Set env
        run: echo "MONGODB_IP=$(grep -E 'mongodb' /tmp/inventory.ini |head -1 |grep -Eo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}')" >> $GITHUB_ENV

      - name: Set SSH_KEY Env
        run: echo "SSH_KEY=$(echo $HOME/.ssh/id_rsa)" >> $GITHUB_ENV

      - name: Execute Script
        working-directory: ./benchmarking
        run: |
          python main.py
        env:
          SERVER_USER: "ubuntu" # as defined during terraform provisioning

      - name: Archive Plots
        uses: actions/upload-artifact@v2
        with:
          name: plots
          path: ./benchmarking/results
