- hosts: mongodb
  tasks:
  - name: Register hostname
    shell: hostname
    register: shell_output
  - name: Output ip
    debug: 
      msg: "hostname: {{ shell_output.stdout_lines }} ip: {{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"

- hosts: all:!mongodb
  vars: 
    process: collector.sh
  tasks:
  - name: Install iotop
    become: yes
    apt:
      name: iotop
      state: present
      update_cache: no
  - name: Install mongo client
    become: yes
    shell: |
      apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 9DA31620334BD75D9DCB49F368818C72E52529D4
      echo "deb [ arch=amd64 ] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.0.list
      apt-get update
      apt-get install -y mongodb-org-shell
  - name: Create directory /etc/scripts if it does not exist
    become: yes
    file:
      path: /etc/scripts
      state: directory
      mode: '0755'
  - name: Copy collector.sh script from localhost to remote 
    become: yes
    copy:
      src: "{{ item }}"
      dest: /etc/scripts
      owner: root
      mode: 600
    loop:
      - collector.sh
  - name: Get running processes
    shell: "ps -ef | grep -v grep | grep -w {{ process }} | awk '{print $2}'"
    register: running_processes
  - name: Kill running processes
    become: yes
    shell: "kill {{ item }}"
    ignore_errors: True
    with_items: "{{ running_processes.stdout_lines }}"
  - become: yes
    wait_for:
      path: "/proc/{{ item }}/status"
      state: absent
    with_items: "{{ running_processes.stdout_lines }}"
    ignore_errors: yes
    register: killed_processes
  - name: Force kill stuck processes
    become: yes
    shell: "kill -9 {{ item }}"
    with_items: "{{ killed_processes.results | select('failed') | map(attribute='item') | list }}"
  - name: Execute collector.sh script
    become: yes
    async: 60 # Maximum allowed time in Seconds
    poll: 5 # poll will check if the task is completed or not for every x secs
    ignore_errors: True
    register: output_collector_script 
    # TODO Remove Max Time Parameter from collector.sh
    shell: 
      cmd: "/etc/scripts/collector.sh 1 {{ eco_name }} {{ hostvars['mongodb']['ansible_default_ipv4']['address'] }} &"
      chdir: /etc/scripts

- hosts: k3s-master, microk8s-master #, openyurt-master
  vars: 
    process: collector.sh
  tasks:
  - name: scale applications to 5 Replicas
    become: yes
    ignore_errors: true
    shell: kubectl scale --replicas=5 deployment/sensor-device-deployment deployment/camera-edge-device
  - name: Wait for default pods become ready
    become: yes
    shell: "kubectl wait --namespace=default --for=condition=Ready pods --timeout=20s --all"
    register: control_plane_pods_ready
    until: control_plane_pods_ready.rc == 0
    retries: 6
    delay: 20
    ignore_errors: true
  # - name: scale application to 20 Replicas
  #   become: yes
  #   shell: kubectl scale --replicas=20 deployment/sensor-device-deployment deployment/camera-edge-device
  # - name: Wait for default pods become ready
  #   become: yes
  #   shell: "kubectl wait --namespace=default --for=condition=Ready pods --timeout=20s --all"
  #   register: control_plane_pods_ready
  #   until: control_plane_pods_ready.rc == 0
  #   retries: 6
  #   delay: 20
  #   ignore_errors: true
  - name: scale application
    become: yes
    shell: kubectl scale --replicas=1 deployment/sensor-device-deployment deployment/camera-edge-device

- name: Increase Send Requests
  hosts: k3s-master, microk8s-master #, openyurt-master
  tasks:
  - name: Changes Variables in Kubernetes Manifest
    vars: 
      counter: 10
    template:   
        src: "kubernetes/{{item}}.j2"    # Iterates over 2 templates   
        dest: "/etc/{{item}}"
        owner: "{{ ansible_user }}"   
        group: "{{ ansible_user }}"   
        mode:  0644 ## OR  mode: u=rw, g=w,o=r        
    become: true     
    loop: # Tell the template module to find each of these templates and process                                              
      - sensor-device-depl.yml
  - name: Apply new Kubernetes Manifest
    become: yes
    ignore_errors: true
    shell: kubectl delete -f /etc/{{ item }} && kubectl apply -f /etc/{{ item }}
    loop:                                              
      - sensor-device-depl.yml
  - name: sleep for x seconds
    shell: sleep 100
  - name: Changes Variables in Kubernetes Manifest
    vars: 
      counter: 100
    template:   
        src: "kubernetes/{{item}}.j2"    # Iterates over 2 templates   
        dest: "/etc/{{item}}"
        owner: "{{ ansible_user }}"   
        group: "{{ ansible_user }}"   
        mode:  0644 ## OR  mode: u=rw, g=w,o=r        
    become: true     
    loop: # Tell the template module to find each of these templates and process                                              
      - sensor-device-depl.yml 
  - name: Apply new Kubernetes Manifest
    become: yes
    ignore_errors: true
    shell: kubectl delete -f /etc/{{ item }} && kubectl apply -f /etc/{{ item }}
    loop:                                              
      - sensor-device-depl.yml


- hosts: all:!mongodb
  vars: 
    process: collector.sh
  tasks:
  - name: Get running processes
    shell: "ps -ef | grep -v grep | grep -w {{ process }} | awk '{print $2}'"
    register: running_processes
  - name: Kill running processes
    ignore_errors: True
    become: yes
    shell: "kill {{ item }}"
    with_items: "{{ running_processes.stdout_lines }}"
  - become: yes
    wait_for:
      path: "/proc/{{ item }}/status"
      state: absent
    with_items: "{{ running_processes.stdout_lines }}"
    ignore_errors: yes
    register: killed_processes
  - name: Force kill stuck processes
    become: yes
    shell: "kill -9 {{ item }}"
    with_items: "{{ killed_processes.results | select('failed') | map(attribute='item') | list }}"
  - name: Write stats json to mongodb
    register: mongdb_output
    shell: "mongo {{ hostvars['mongodb']['ansible_default_ipv4']['address'] }}/metrics < /etc/scripts/stats.json"
  - debug:
      msg: "{{ mongdb_output }}"