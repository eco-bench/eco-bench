- hosts: mongodb
  tasks:
  - name: Register hostname
    shell: hostname
    register: shell_output
  - name: Output ip
    debug: 
      msg: "hostname: {{ shell_output.stdout_lines }} ip: {{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"

- hosts: all:!mongodb
  tasks:
  - name: print out shell command
    debug: 
      msg: bash -c "exec -a EinTestName /etc/scripts/collector.sh 1 {{ eco_name }} {{ hostvars['mongodb']['ansible_default_ipv4']['address'] }} &"
  - name: Install iotop
    become: yes
    apt:
      name: iotop
      state: present
      update_cache: yes
  - name: Install mongo client
    become: yes
    shell: |
      apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 9DA31620334BD75D9DCB49F368818C72E52529D4
      echo "deb [ arch=amd64 ] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.0.list
      apt-get update
      apt-get install -y mongodb-org-shell
  - name: Create directory /etc/scripts if it does not exist
    become: yes
    file:
      path: /etc/scripts
      state: directory
      mode: '0755'
  - name: Copy collector.sh script from localhost to remote 
    become: yes
    copy:
      src: "{{ item }}"
      dest: /etc/scripts
      owner: root
      mode: 600
    loop:
      - collector.sh 
  # - name: Check what is in /etc/scripts
  #   become: yes
  #   shell: ls /etc/scripts
  #   register: shell_output
  # - name: print output
  #   debug: 
  #     msg: "This is a file {{ item }}"
  #   loop: "{{ shell_output.stdout_lines }}"
  - name: print out shell command
    debug: 
  # bash -c \"exec -a EinTestName /etc/scripts/collector.sh 1 {{ eco_name }} {{ hostvars['mongodb']['ansible_default_ipv4']['address'] }} &\"    
      msg: "/etc/scripts/collector.sh 1 {{ eco_name }} {{ hostvars['mongodb']['ansible_default_ipv4']['address'] }} &"
  - name: Execute collector.sh script
    become: yes
    async: 60 # Maximum allowed time in Seconds
    poll: 5 # poll will check if the task is completed or not for every x secs
    ignore_errors: True
    register: output_collector_script 
    # TODO Remove Max Time Parameter from collector.sh
    shell: 
      cmd: "bash -c \"exec -a EinTestName /etc/scripts/collector.sh 1 {{ eco_name }} {{ hostvars['mongodb']['ansible_default_ipv4']['address'] }} &\""
      chdir: /etc/scripts
  # - debug:  
  #     msg: "{{ output_collector_script }}"
  # # - debug:  
  # #     msg: "{{ output_collector_script.stdout_lines[1] }}"
  # - become: yes
  #   register: cat_output
  #   ignore_errors: True
  #   shell: 
  #     cmd: cat stats.json
  #     chdir: /etc/scripts
  # - name: print out
  #   debug: 
  #     msg: "{{ cat_output.stdout_lines }}"

- hosts: k3s-master, microk8s-master #, openyurt-master
  tasks:
  - name: scale applications to 5 Replicas
    become: yes
    shell: kubectl scale --replicas=5 deployment/sensor-device-deployment deployment/camera-edge-device
  - name: Wait for default pods become ready
    become: yes
    shell: "kubectl wait --namespace=default --for=condition=Ready pods --timeout=20s --all"
    register: control_plane_pods_ready
    until: control_plane_pods_ready.rc == 0
    retries: 6
    delay: 20
    ignore_errors: true
  # - name: scale application to 20 Replicas
  #   become: yes
  #   shell: kubectl scale --replicas=20 deployment/sensor-device-deployment deployment/camera-edge-device
  # - name: Wait for default pods become ready
  #   become: yes
  #   shell: "kubectl wait --namespace=default --for=condition=Ready pods --timeout=20s --all"
  #   register: control_plane_pods_ready
  #   until: control_plane_pods_ready.rc == 0
  #   retries: 6
  #   delay: 20
  #   ignore_errors: true
  - name: scale application
    become: yes
    shell: kubectl scale --replicas=1 deployment/sensor-device-deployment deployment/camera-edge-device
  - name: kill bench
    become: yes
    shell: "kill $(ps aux | grep 'collector.sh' |  awk '{print $2}')"
    ignore_errors: true
    delay: 20
    register: shell_output
  - name: print out
    debug: 
      msg: "{{ shell_output.stdout_lines }}"